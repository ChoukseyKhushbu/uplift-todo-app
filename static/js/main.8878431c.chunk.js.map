{"version":3,"sources":["components/TodoItem.jsx","components/InputArea.jsx","components/App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","className","onMouseOver","onHover","id","onMouseOut","type","name","checked","item","completed","onChange","e","onEdit","value","task","style","textDecoration","disabled","display","editing","onClick","onDelete","InputArea","useState","setTask","event","newTodo","target","onadd","App","todoArray","setTodoArray","delTodo","filter","ind","editTodo","map","displayDel","uuidv4","index","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uNAwCeA,MAtCf,SAAkBC,GAChB,OACE,yBACEC,UAAU,WACVC,YAAa,kBAAMF,EAAMG,QAAQH,EAAMI,KACvCC,WAAY,kBAAML,EAAMG,QAAQH,EAAMI,MAEtC,6BACE,2BACEE,KAAK,WACLC,KAAK,QACLC,QAASR,EAAMS,KAAKC,UACpBC,SAAU,SAACC,GAAD,OAAOZ,EAAMa,OAAOD,EAAGZ,EAAMI,OAEzC,2BACEE,KAAK,OACLC,KAAK,OACLN,UAAU,YACVa,MAAOd,EAAMS,KAAKM,KAClBC,MAAO,CACLC,eAAgBjB,EAAMS,KAAKC,UAAY,eAAiB,QAE1DC,SAAU,SAACC,GAAD,OAAOZ,EAAMa,OAAOD,EAAGZ,EAAMI,KACvCc,SAAUlB,EAAMS,KAAKC,aAIzB,6BACE,uBACEM,MAAO,CAAEG,QAASnB,EAAMS,KAAKW,QAAU,OAAS,QAChDnB,UAAU,mBACVoB,QAAS,kBAAMrB,EAAMsB,SAAStB,EAAMI,UCR/BmB,MAvBf,SAAmBvB,GAAQ,IAAD,EACAwB,mBAAS,IADT,mBACjBT,EADiB,KACXU,EADW,KAQxB,OACE,yBAAKxB,UAAU,QACb,2BAAOK,KAAK,OAAOQ,MAAOC,EAAMJ,SAPpC,SAAsBe,GACpB,IAAMC,EAAUD,EAAME,OAAOd,MAC7BW,EAAQE,MAMN,4BACEN,QAAS,WACPrB,EAAM6B,MAAMd,GACZU,EAAQ,MAGV,wCCwDOK,MAtEf,WAAgB,IAAD,EACqBN,mBAAS,IAD9B,mBACNO,EADM,KACKC,EADL,KAWb,SAASC,EAAQ7B,GACf4B,GAAa,SAACD,GACZ,OAAOA,EAAUG,QAAO,SAACzB,EAAM0B,GAAP,OAAeA,IAAQ/B,QAGnD,SAASgC,EAASxB,EAAGR,GAAK,IAAD,EACCQ,EAAEgB,OAAlBrB,EADe,EACfA,KAAMO,EADS,EACTA,MACD,UAATP,EACFyB,GAAa,SAACD,GACZ,OAAOA,EAAUM,KAAI,SAAC5B,EAAM0B,GAI1B,OAHIA,IAAQ/B,IACVK,EAAKC,WAAaD,EAAKC,WAElBD,QAGO,SAATF,GACTyB,GAAa,SAACD,GACZ,OAAOA,EAAUM,KAAI,SAAC5B,EAAM0B,GAI1B,OAHIA,IAAQ/B,IACVK,EAAKM,KAAOD,GAEPL,QAKf,SAAS6B,EAAWlC,GAClB4B,GAAa,SAACD,GACZ,OAAOA,EAAUM,KAAI,SAAC5B,EAAM0B,GAI1B,OAHIA,IAAQ/B,IACVK,EAAKW,SAAWX,EAAKW,SAEhBX,QAIb,OACE,yBAAKR,UAAU,aACb,yBAAKA,UAAU,WACb,2CAEF,kBAAC,EAAD,CAAW4B,MAlDf,SAAiBd,GACXA,GACFiB,EAAa,GAAD,mBACPD,GADO,CAEV,CAAEhB,KAAMA,EAAML,WAAW,EAAOU,SAAS,EAAOhB,GAAImC,qBA+CtD,6BACGR,EAAUM,KAAI,SAAC5B,EAAM+B,GAAP,OACb,kBAAC,EAAD,CACE/B,KAAMA,EACNgC,IAAKhC,EAAKL,GACVA,GAAIoC,EACJlB,SAAUW,EACVpB,OAAQuB,EACRjC,QAASmC,UCvDDI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8878431c.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction TodoItem(props) {\n  return (\n    <div\n      className=\"todoItem\"\n      onMouseOver={() => props.onHover(props.id)}\n      onMouseOut={() => props.onHover(props.id)}\n    >\n      <div>\n        <input\n          type=\"checkbox\"\n          name=\"check\"\n          checked={props.item.completed}\n          onChange={(e) => props.onEdit(e, props.id)}\n        />\n        <input\n          type=\"text\"\n          name=\"edit\"\n          className=\"todoLabel\"\n          value={props.item.task}\n          style={{\n            textDecoration: props.item.completed ? \"line-through\" : \"none\",\n          }}\n          onChange={(e) => props.onEdit(e, props.id)}\n          disabled={props.item.completed}\n        />\n      </div>\n\n      <div>\n        <i\n          style={{ display: props.item.editing ? \"flex\" : \"none\" }}\n          className=\"fas fa-trash-alt\"\n          onClick={() => props.onDelete(props.id)}\n        ></i>\n      </div>\n    </div>\n  );\n}\n\nexport default TodoItem;\n","import React, { useState } from \"react\";\n\nfunction InputArea(props) {\n  const [task, setTask] = useState(\"\");\n\n  function handleChange(event) {\n    const newTodo = event.target.value;\n    setTask(newTodo);\n  }\n\n  return (\n    <div className=\"form\">\n      <input type=\"text\" value={task} onChange={handleChange} />\n      <button\n        onClick={() => {\n          props.onadd(task);\n          setTask(\"\");\n        }}\n      >\n        <span>Add</span>\n      </button>\n    </div>\n  );\n}\n\nexport default InputArea;\n","import React, { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport TodoItem from \"./TodoItem\";\nimport InputArea from \"./InputArea\";\n\nfunction App() {\n  const [todoArray, setTodoArray] = useState([]);\n\n  function addTodo(task) {\n    if (task) {\n      setTodoArray([\n        ...todoArray,\n        { task: task, completed: false, editing: false, id: uuidv4() },\n      ]);\n    }\n  }\n  function delTodo(id) {\n    setTodoArray((todoArray) => {\n      return todoArray.filter((item, ind) => ind !== id);\n    });\n  }\n  function editTodo(e, id) {\n    const { name, value } = e.target;\n    if (name === \"check\") {\n      setTodoArray((todoArray) => {\n        return todoArray.map((item, ind) => {\n          if (ind === id) {\n            item.completed = !item.completed;\n          }\n          return item;\n        });\n      });\n    } else if (name === \"edit\") {\n      setTodoArray((todoArray) => {\n        return todoArray.map((item, ind) => {\n          if (ind === id) {\n            item.task = value;\n          }\n          return item;\n        });\n      });\n    }\n  }\n  function displayDel(id) {\n    setTodoArray((todoArray) => {\n      return todoArray.map((item, ind) => {\n        if (ind === id) {\n          item.editing = !item.editing;\n        }\n        return item;\n      });\n    });\n  }\n  return (\n    <div className=\"container\">\n      <div className=\"heading\">\n        <h1>To-Do List</h1>\n      </div>\n      <InputArea onadd={addTodo} />\n      <div>\n        {todoArray.map((item, index) => (\n          <TodoItem\n            item={item}\n            key={item.id}\n            id={index}\n            onDelete={delTodo}\n            onEdit={editTodo}\n            onHover={displayDel}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}